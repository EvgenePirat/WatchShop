// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchShop_Infrastructure.DbContext;

#nullable disable

namespace WatchShop_Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240425083509_addSetNullAfterDeleteApplicationUser")]
    partial class addSetNullAfterDeleteApplicationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.AdditionalCharacteristics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("additional_characteristics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = 9
                        },
                        new
                        {
                            Id = 10,
                            Name = 10
                        },
                        new
                        {
                            Id = 11,
                            Name = 11
                        },
                        new
                        {
                            Id = 12,
                            Name = 12
                        },
                        new
                        {
                            Id = 13,
                            Name = 13
                        },
                        new
                        {
                            Id = 14,
                            Name = 14
                        },
                        new
                        {
                            Id = 15,
                            Name = 15
                        },
                        new
                        {
                            Id = 16,
                            Name = 16
                        },
                        new
                        {
                            Id = 17,
                            Name = 17
                        },
                        new
                        {
                            Id = 18,
                            Name = 18
                        },
                        new
                        {
                            Id = 19,
                            Name = 19
                        },
                        new
                        {
                            Id = 20,
                            Name = 20
                        },
                        new
                        {
                            Id = 21,
                            Name = 21
                        },
                        new
                        {
                            Id = 22,
                            Name = 22
                        },
                        new
                        {
                            Id = 23,
                            Name = 23
                        },
                        new
                        {
                            Id = 24,
                            Name = 24
                        },
                        new
                        {
                            Id = 25,
                            Name = 25
                        },
                        new
                        {
                            Id = 26,
                            Name = 26
                        },
                        new
                        {
                            Id = 27,
                            Name = 27
                        },
                        new
                        {
                            Id = 28,
                            Name = 28
                        },
                        new
                        {
                            Id = 29,
                            Name = 29
                        },
                        new
                        {
                            Id = 30,
                            Name = 30
                        },
                        new
                        {
                            Id = 31,
                            Name = 31
                        },
                        new
                        {
                            Id = 32,
                            Name = 32
                        },
                        new
                        {
                            Id = 33,
                            Name = 33
                        },
                        new
                        {
                            Id = 34,
                            Name = 34
                        },
                        new
                        {
                            Id = 35,
                            Name = 35
                        },
                        new
                        {
                            Id = 36,
                            Name = 36
                        },
                        new
                        {
                            Id = 37,
                            Name = 37
                        },
                        new
                        {
                            Id = 38,
                            Name = 38
                        },
                        new
                        {
                            Id = 39,
                            Name = 39
                        },
                        new
                        {
                            Id = 40,
                            Name = 40
                        },
                        new
                        {
                            Id = 41,
                            Name = 41
                        },
                        new
                        {
                            Id = 42,
                            Name = 42
                        },
                        new
                        {
                            Id = 43,
                            Name = 43
                        },
                        new
                        {
                            Id = 44,
                            Name = 44
                        },
                        new
                        {
                            Id = 45,
                            Name = 45
                        },
                        new
                        {
                            Id = 46,
                            Name = 46
                        },
                        new
                        {
                            Id = 47,
                            Name = 47
                        },
                        new
                        {
                            Id = 48,
                            Name = 48
                        },
                        new
                        {
                            Id = 49,
                            Name = 49
                        },
                        new
                        {
                            Id = 50,
                            Name = 50
                        },
                        new
                        {
                            Id = 51,
                            Name = 51
                        },
                        new
                        {
                            Id = 52,
                            Name = 52
                        },
                        new
                        {
                            Id = 53,
                            Name = 53
                        },
                        new
                        {
                            Id = 54,
                            Name = 54
                        },
                        new
                        {
                            Id = 55,
                            Name = 55
                        },
                        new
                        {
                            Id = 56,
                            Name = 56
                        },
                        new
                        {
                            Id = 57,
                            Name = 57
                        },
                        new
                        {
                            Id = 58,
                            Name = 58
                        },
                        new
                        {
                            Id = 59,
                            Name = 59
                        },
                        new
                        {
                            Id = 60,
                            Name = 60
                        },
                        new
                        {
                            Id = 61,
                            Name = 61
                        });
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Brend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("brends");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WatchId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "WatchId");

                    b.HasIndex("WatchId");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.ClockFace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("ClockFaceColorId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IndicationKindId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("IndicationTypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ClockFaceColorId");

                    b.HasIndex("IndicationKindId");

                    b.HasIndex("IndicationTypeId");

                    b.ToTable("clock_faces");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.ClockFaceColor", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("clock_face_colors");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = 0
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = 1
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = 2
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = 3
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = 4
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = 5
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = 6
                        },
                        new
                        {
                            Id = (byte)8,
                            Name = 7
                        },
                        new
                        {
                            Id = (byte)9,
                            Name = 8
                        },
                        new
                        {
                            Id = (byte)10,
                            Name = 9
                        },
                        new
                        {
                            Id = (byte)11,
                            Name = 10
                        },
                        new
                        {
                            Id = (byte)12,
                            Name = 11
                        },
                        new
                        {
                            Id = (byte)13,
                            Name = 12
                        });
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Country", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("countries");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = 1
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = 2
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = 3
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = 4
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = 5
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = 6
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = 7
                        },
                        new
                        {
                            Id = (byte)8,
                            Name = 8
                        },
                        new
                        {
                            Id = (byte)9,
                            Name = 9
                        },
                        new
                        {
                            Id = (byte)10,
                            Name = 10
                        },
                        new
                        {
                            Id = (byte)11,
                            Name = 11
                        },
                        new
                        {
                            Id = (byte)12,
                            Name = 12
                        },
                        new
                        {
                            Id = (byte)13,
                            Name = 13
                        },
                        new
                        {
                            Id = (byte)14,
                            Name = 14
                        },
                        new
                        {
                            Id = (byte)15,
                            Name = 15
                        },
                        new
                        {
                            Id = (byte)16,
                            Name = 16
                        },
                        new
                        {
                            Id = (byte)17,
                            Name = 17
                        },
                        new
                        {
                            Id = (byte)18,
                            Name = 18
                        },
                        new
                        {
                            Id = (byte)19,
                            Name = 19
                        });
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Dimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseDiameter")
                        .HasColumnType("int");

                    b.Property<double?>("Length")
                        .HasColumnType("float");

                    b.Property<double?>("Thickness")
                        .HasColumnType("float");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("dimensions");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Frame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseShape")
                        .HasColumnType("int");

                    b.Property<int>("DimensionsId")
                        .HasColumnType("int");

                    b.Property<byte>("FrameColorId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("FrameMaterialId")
                        .HasColumnType("tinyint");

                    b.Property<int>("WaterResistance")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DimensionsId");

                    b.HasIndex("FrameColorId");

                    b.HasIndex("FrameMaterialId");

                    b.ToTable("Frames");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.FrameColor", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("frame_colors");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = 1
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = 2
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = 3
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = 4
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = 5
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = 6
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = 7
                        },
                        new
                        {
                            Id = (byte)8,
                            Name = 8
                        },
                        new
                        {
                            Id = (byte)9,
                            Name = 9
                        },
                        new
                        {
                            Id = (byte)10,
                            Name = 10
                        },
                        new
                        {
                            Id = (byte)11,
                            Name = 11
                        },
                        new
                        {
                            Id = (byte)12,
                            Name = 12
                        },
                        new
                        {
                            Id = (byte)13,
                            Name = 13
                        },
                        new
                        {
                            Id = (byte)14,
                            Name = 14
                        },
                        new
                        {
                            Id = (byte)15,
                            Name = 15
                        },
                        new
                        {
                            Id = (byte)16,
                            Name = 16
                        },
                        new
                        {
                            Id = (byte)17,
                            Name = 17
                        },
                        new
                        {
                            Id = (byte)18,
                            Name = 18
                        },
                        new
                        {
                            Id = (byte)19,
                            Name = 19
                        });
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.FrameMaterial", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("frame_materials");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = 1
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = 2
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = 3
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = 4
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = 5
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = 6
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = 7
                        },
                        new
                        {
                            Id = (byte)8,
                            Name = 8
                        },
                        new
                        {
                            Id = (byte)9,
                            Name = 9
                        },
                        new
                        {
                            Id = (byte)10,
                            Name = 10
                        },
                        new
                        {
                            Id = (byte)11,
                            Name = 11
                        },
                        new
                        {
                            Id = (byte)12,
                            Name = 12
                        },
                        new
                        {
                            Id = (byte)13,
                            Name = 13
                        },
                        new
                        {
                            Id = (byte)14,
                            Name = 14
                        },
                        new
                        {
                            Id = (byte)15,
                            Name = 15
                        },
                        new
                        {
                            Id = (byte)16,
                            Name = 16
                        });
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.GlassType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("glass_types");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = 0
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = 2
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = 3
                        });
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Identities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Identities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAccountDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsSubscriptionLetters")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("WatchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WatchId");

                    b.ToTable("images");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.IndicationKind", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("indication_kinds");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = 0
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = 1
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = 2
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = 3
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = 4
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = 5
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = 6
                        },
                        new
                        {
                            Id = (byte)8,
                            Name = 7
                        });
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.IndicationType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("indication_types");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = 0
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = 2
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = 3
                        });
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.MechanismType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("mechanism_types");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = 0
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = 1
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = 2
                        });
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("OrderStatusId")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Sum")
                        .HasColumnType("float");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("ShipmentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.OrderStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("order_statuses");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = 0
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = 1
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = 2
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = 3
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = 4
                        });
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StripeIntendId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("shipments");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Strap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<byte>("StrapMaterialId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("StrapMaterialId");

                    b.ToTable("straps");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.StrapMaterial", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("strap_materials");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = 0
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = 1
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = 2
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = 3
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = 4
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = 5
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = 6
                        },
                        new
                        {
                            Id = (byte)8,
                            Name = 7
                        },
                        new
                        {
                            Id = (byte)9,
                            Name = 8
                        },
                        new
                        {
                            Id = (byte)10,
                            Name = 9
                        },
                        new
                        {
                            Id = (byte)11,
                            Name = 10
                        },
                        new
                        {
                            Id = (byte)12,
                            Name = 11
                        });
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Style", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("styles");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = 0
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = 1
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = 2
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = 3
                        });
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Watch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrendId")
                        .HasColumnType("int");

                    b.Property<int>("ClockFaceId")
                        .HasColumnType("int");

                    b.Property<byte>("CountryId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double?>("DiscountPrice")
                        .HasColumnType("float");

                    b.Property<int>("FrameId")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<byte>("GlassTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("Guarantee")
                        .HasColumnType("int");

                    b.Property<bool>("IsDiscounted")
                        .HasColumnType("bit");

                    b.Property<byte>("MechanismTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("NameModel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("StrapId")
                        .HasColumnType("int");

                    b.Property<byte>("StyleId")
                        .HasColumnType("tinyint");

                    b.Property<int>("TimeFormat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrendId");

                    b.HasIndex("ClockFaceId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("FrameId");

                    b.HasIndex("GlassTypeId");

                    b.HasIndex("MechanismTypeId");

                    b.HasIndex("NameModel")
                        .IsUnique();

                    b.HasIndex("StrapId")
                        .IsUnique();

                    b.HasIndex("StyleId");

                    b.ToTable("watches");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.WatchAdditionalCharacteristic", b =>
                {
                    b.Property<int>("WatchId")
                        .HasColumnType("int");

                    b.Property<int>("AdditionalCharacteristicsId")
                        .HasColumnType("int");

                    b.HasKey("WatchId", "AdditionalCharacteristicsId");

                    b.HasIndex("AdditionalCharacteristicsId");

                    b.ToTable("watch_additional_characteristics");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.WatchComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WatchId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WatchId");

                    b.ToTable("watch_comments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.Identities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.Identities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.Identities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.Identities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.Identities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.Identities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Cart", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.Order", "Order")
                        .WithMany("Carts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.Watch", "Watch")
                        .WithMany("Carts")
                        .HasForeignKey("WatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Watch");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.ClockFace", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.ClockFaceColor", "ClockFaceColor")
                        .WithMany("ClockFaces")
                        .HasForeignKey("ClockFaceColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.IndicationKind", "IndicationKind")
                        .WithMany("ClockFaces")
                        .HasForeignKey("IndicationKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.IndicationType", "IndicationType")
                        .WithMany("ClockFaces")
                        .HasForeignKey("IndicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClockFaceColor");

                    b.Navigation("IndicationKind");

                    b.Navigation("IndicationType");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Frame", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.Dimension", "Dimensions")
                        .WithMany("Frames")
                        .HasForeignKey("DimensionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.FrameColor", "FrameColor")
                        .WithMany()
                        .HasForeignKey("FrameColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.FrameMaterial", "FrameMaterial")
                        .WithMany("Frames")
                        .HasForeignKey("FrameMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dimensions");

                    b.Navigation("FrameColor");

                    b.Navigation("FrameMaterial");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Image", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.Watch", "Watch")
                        .WithMany("Images")
                        .HasForeignKey("WatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Watch");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Order", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.Payment", "Payment")
                        .WithOne("Order")
                        .HasForeignKey("WatchShop_Core.Domain.Entities.Order", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.Shipment", "Shipment")
                        .WithOne("Order")
                        .HasForeignKey("WatchShop_Core.Domain.Entities.Order", "ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.Identities.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("OrderStatus");

                    b.Navigation("Payment");

                    b.Navigation("Shipment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Payment", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.Identities.ApplicationUser", "ApplicationUser")
                        .WithMany("Payments")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.Identities.ApplicationUser", "ApplicationUser")
                        .WithMany("Shipments")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Strap", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.StrapMaterial", "StrapMaterial")
                        .WithMany("Straps")
                        .HasForeignKey("StrapMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrapMaterial");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Watch", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.Brend", "Brend")
                        .WithMany("Watches")
                        .HasForeignKey("BrendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.ClockFace", "ClockFace")
                        .WithOne("Watch")
                        .HasForeignKey("WatchShop_Core.Domain.Entities.Watch", "ClockFaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.Country", "Country")
                        .WithMany("Watches")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.Frame", "Frame")
                        .WithMany("Watches")
                        .HasForeignKey("FrameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.GlassType", "GlassType")
                        .WithMany("Watches")
                        .HasForeignKey("GlassTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.MechanismType", "MechanismType")
                        .WithMany("Watches")
                        .HasForeignKey("MechanismTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.Strap", "Strap")
                        .WithOne("Watch")
                        .HasForeignKey("WatchShop_Core.Domain.Entities.Watch", "StrapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.Style", "Style")
                        .WithMany("Watches")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brend");

                    b.Navigation("ClockFace");

                    b.Navigation("Country");

                    b.Navigation("Frame");

                    b.Navigation("GlassType");

                    b.Navigation("MechanismType");

                    b.Navigation("Strap");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.WatchAdditionalCharacteristic", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.AdditionalCharacteristics", "AdditionalCharacteristics")
                        .WithMany("WatchAdditionalCharacteristics")
                        .HasForeignKey("AdditionalCharacteristicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.Watch", "Watch")
                        .WithMany("WatchAdditionalCharacteristics")
                        .HasForeignKey("WatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalCharacteristics");

                    b.Navigation("Watch");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.WatchComment", b =>
                {
                    b.HasOne("WatchShop_Core.Domain.Entities.Identities.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchShop_Core.Domain.Entities.Watch", "Watch")
                        .WithMany("Comments")
                        .HasForeignKey("WatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Watch");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.AdditionalCharacteristics", b =>
                {
                    b.Navigation("WatchAdditionalCharacteristics");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Brend", b =>
                {
                    b.Navigation("Watches");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.ClockFace", b =>
                {
                    b.Navigation("Watch")
                        .IsRequired();
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.ClockFaceColor", b =>
                {
                    b.Navigation("ClockFaces");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Country", b =>
                {
                    b.Navigation("Watches");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Dimension", b =>
                {
                    b.Navigation("Frames");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Frame", b =>
                {
                    b.Navigation("Watches");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.FrameMaterial", b =>
                {
                    b.Navigation("Frames");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.GlassType", b =>
                {
                    b.Navigation("Watches");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Identities.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.IndicationKind", b =>
                {
                    b.Navigation("ClockFaces");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.IndicationType", b =>
                {
                    b.Navigation("ClockFaces");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.MechanismType", b =>
                {
                    b.Navigation("Watches");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Order", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Payment", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Shipment", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Strap", b =>
                {
                    b.Navigation("Watch")
                        .IsRequired();
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.StrapMaterial", b =>
                {
                    b.Navigation("Straps");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Style", b =>
                {
                    b.Navigation("Watches");
                });

            modelBuilder.Entity("WatchShop_Core.Domain.Entities.Watch", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("WatchAdditionalCharacteristics");
                });
#pragma warning restore 612, 618
        }
    }
}
